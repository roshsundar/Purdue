The following program submission has been recorded:

Student: rmsundar
Class: CS159
Section: 15906
Assignment: lab06.c
Submission: 2021-03-10 18:44

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. rmsundar@purdue.edu
     5	*  2. jiang781@purdue.edu
     6	*  3. mcouso@purdue.edu
     7	*
     8	*  Lab #: 6
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: DIST
    17	*
    18	*  Program Description: User inputs three points (A, B, C) that will always create a triangle with a positive area. Program calculates and outputs the location of the orthocenter, circumcenter, and the location of the center of the nine point circle and whether that point is inside or outside of the triangle
    19	*
    20	***************************************************************************/
    21	
    22	#include <stdio.h>
    23	#include <math.h>
    24	
    25	void Input (double*, double*, double*, double*, double*, double*);
    26	double GetOrthoC_x (double, double, double, double, double, double);
    27	double GetOrthoC_y (double, double, double, double, double, double);
    28	double CalcDist (double, double, double, double);
    29	double CalcAngle (double, double, double);
    30	double GetCircumC_x(double, double, double, double, double, double);
    31	double GetCircumC_y(double, double, double, double, double, double);
    32	double GetNinePointC_x (double, double);
    33	double GetNinePointC_y (double, double);
    34	double GetTriArea (double, double, double);
    35	void Output (double, double, double, double, double, double, double, double, double, double);
    36	
    37	int main(void)
    38	{
    39	  //---Declarations---
    40	  double x_1 = 0; // x coord of point 1
    41	  double y_1 = 0; // y coord of point 1
    42	  double x_2 = 0; // x coord of point 2
    43	  double y_2 = 0; // y coord of point 2
    44	  double x_3 = 0; // x coord of point 3
    45	  double y_3 = 0; // y coord of point 3
    46	
    47	  double d_12 = 0; // Distance from point 1 to point 2
    48	  double d_23 = 0; // Distance from point 2 to point 3
    49	  double d_31 = 0; // Distance from point 3 to point 1
    50	
    51	  double d_1cen9 = 0; //Distance from point 1 to nine point circle center
    52	  double d_2cen9 = 0; //Distance from point 2 to nine point circle center
    53	  double d_3cen9 = 0; //Distance from point 3 to nine point circle center
    54	
    55	  double angle_1 = 0; // The degree of angle 1
    56	  double angle_2 = 0; // The degree of angle 2
    57	  double angle_3 = 0; // The degree of angle 3
    58	  
    59	  double orthc_x = 0; // The x coord of orthocenter
    60	  double orthc_y = 0; // The y coord of orthocenter
    61	
    62	  double circ_x = 0; // The x coord of circumcenter
    63	  double circ_y = 0; // The y coord of circumcenter
    64	
    65	  double cen9_x = 0; // The x coord of nine point circle center
    66	  double cen9_y = 0; // The y coord of nine point circle center
    67	
    68	  double triArea = 0; //The area of the triangle made up with point A, B and C
    69	  double smallTri_A1 = 0; //The area of the triangle made up with points A, B and nine point circle center
    70	  double smallTri_A2 = 0; //The area of the triangle made up with points B, C, and the nine point circle center
    71	  double smallTri_A3 = 0; //The area of the triangle made up with points C, A, and the nine point circle center
    72	
    73	  //---Executables---
    74	  Input (&x_1, &y_1, &x_2, &y_2, &x_3, &y_3);
    75	  
    76	  d_12 = CalcDist(x_1, y_1, x_2, y_2);
    77	  d_23 = CalcDist(x_2, y_2, x_3, y_3);
    78	  d_31 = CalcDist(x_3, y_3, x_1, y_1);
    79	
    80	  angle_1 = CalcAngle (d_31, d_12, d_23);
    81	  angle_2 = CalcAngle (d_23, d_12, d_31);
    82	  angle_3 = CalcAngle(d_31, d_23, d_12);
    83	
    84	  orthc_x = GetOrthoC_x(x_1, x_2, x_3, angle_1, angle_2, angle_3);
    85	  orthc_y = GetOrthoC_y(y_1, y_2, y_3, angle_1, angle_2, angle_3);
    86	  
    87	  circ_x = GetCircumC_x(x_1, x_2, x_3, angle_1, angle_2, angle_3);
    88	  circ_y = GetCircumC_y(y_1, y_2, y_3, angle_1, angle_2, angle_3);
    89	  
    90	  cen9_x = GetNinePointC_x(orthc_x, circ_x);
    91	  cen9_y = GetNinePointC_y(orthc_y, circ_y);
    92	
    93	  d_1cen9 = CalcDist(cen9_x, cen9_y, x_1, y_1);
    94	  d_2cen9 = CalcDist(cen9_x, cen9_y, x_2, y_2);
    95	  d_3cen9 = CalcDist(cen9_x, cen9_y, x_3, y_3);
    96	
    97	  triArea = GetTriArea(d_12, d_23, d_31);
    98	  smallTri_A1 = GetTriArea(d_12, d_1cen9, d_2cen9); 
    99	  smallTri_A2 = GetTriArea(d_23, d_2cen9, d_3cen9);
   100	  smallTri_A3 = GetTriArea(d_31, d_1cen9, d_3cen9);
   101	
   102	  Output(orthc_x, orthc_y, circ_x, circ_y, cen9_x, cen9_y, triArea, smallTri_A1, smallTri_A2, smallTri_A3);
   103	
   104	  //---Exit---
   105	  return(0);
   106	}
   107	
   108	/***************************************************************************
   109	*
   110	*  Function Information
   111	*
   112	*  Name of Function: Input
   113	*
   114	*  Function Return Type: void
   115	*
   116	*  Parameters (list data type, name, and comment one per line):
   117	*    1. double *x_1 memory address of x_1 in main() 
   118	*    2. double *y_1 memory address of y_1 in main() 
   119	*    3. double *x_2 memory address of x_2 in main() 
   120	*.   4. double *y_2 memory address of y_2 in main() 
   121	*    5. double *x_3 memory address of x_3 in main() 
   122	*.   6. double *y_3 memory address of y_3 in main() 
   123	*
   124	*  Function Description: Gets user input and fills above variables
   125	*
   126	***************************************************************************/
   127	void Input (double *x_1, double *y_1, double *x_2, double *y_2, double *x_3, double *y_3)
   128	{
   129	  //---Executables---
   130	  printf("Enter X coordinate #1 -> ");
   131	  scanf("%lf", x_1);
   132	
   133	  printf("Enter Y coordinate #1 -> ");
   134	  scanf("%lf", y_1);
   135	
   136	  printf("Enter X coordinate #2 -> ");
   137	  scanf("%lf", x_2);
   138	
   139	  printf("Enter Y coordinate #2 -> ");
   140	  scanf("%lf", y_2);
   141	
   142	  printf("Enter X coordinate #3 -> ");
   143	  scanf("%lf", x_3);
   144	
   145	  printf("Enter Y coordinate #3 -> ");
   146	  scanf("%lf", y_3);
   147	}
   148	
   149	/***************************************************************************
   150	*
   151	*  Function Information
   152	*
   153	*  Name of Function: GetOrthoC_x
   154	*
   155	*  Function Return Type: double
   156	*
   157	*  Parameters (list data type, name, and comment one per line):
   158	*    1. double x_1: get x coordinate of point 1
   159	*    2. double x_2: get x coordinate of point 2
   160	*    3. double x_3: get x coordinate of point 3
   161	*    4. double angle_1: get degree of angle 1
   162	*    5. double angle_2: get degree of angle 2
   163	*    6. double angle_3: get degree of angle 3
   164	*
   165	*  Function Description: Calculates the x coord of the orthocenter of a triangle
   166	*
   167	***************************************************************************/
   168	double GetOrthoC_x (double x_1, double x_2, double x_3, double angle_1, double angle_2, double angle_3)
   169	{
   170	  //---Declarations---
   171	  double ortho_x; // The x coord of orthocenter of a triangle
   172	  
   173	  //---Executables---
   174	  ortho_x = (x_1 * tan((M_PI *angle_1) / 180) + x_2 * tan((M_PI *angle_2) / 180) + x_3 * tan((M_PI *angle_3) / 180)) / (tan((M_PI *angle_1) / 180) + tan((M_PI *angle_2) / 180) + tan((M_PI *angle_3) / 180));
   175	  
   176	  //---Exit---
   177	  return(ortho_x);
   178	}
   179	
   180	/***************************************************************************
   181	*
   182	*  Function Information
   183	*
   184	*  Name of Function: GetOrthoC_y
   185	*
   186	*  Function Return Type: double 
   187	*
   188	*  Parameters (list data type, name, and comment one per line):
   189	*    1. double x_1: get y coordinate of point 1
   190	*    2. double x_2: get y coordinate of point 2
   191	*    3. double x_3: get y coordinate of point 3
   192	*    4. double angle_1: get degree of angle 1
   193	*    5. double angle_2: get degree of angle 2
   194	*    6. double angle_3: get degree of angle 3
   195	*
   196	*  Function Description: Calculates the y coord of the orthocenter of a triangle
   197	*
   198	***************************************************************************/
   199	double GetOrthoC_y (double y_1, double y_2, double y_3, double angle_1, double angle_2, double angle_3)
   200	{
   201	  //---Declarations---
   202	  double ortho_y; // The y coord of orthocenter of a triangle
   203	
   204	  //---Executables---
   205	  ortho_y = (y_1 * tan((M_PI *angle_1) / 180) + y_2 * tan((M_PI *angle_2) / 180) + y_3 * tan((M_PI *angle_3) / 180)) / (tan((M_PI *angle_1) / 180) + tan((M_PI *angle_2) / 180) + tan((M_PI *angle_3) / 180));
   206	
   207	  //---Exit---
   208	  return(ortho_y);
   209	}
   210	
   211	/***************************************************************************
   212	*
   213	*  Function Information
   214	*
   215	*  Name of Function: GetCircumC_x
   216	*
   217	*  Function Return Type: double 
   218	*
   219	*  Parameters (list data type, name, and comment one per line):
   220	*    1. double x_1: get x coordinate of point 1
   221	*    2. double x_2: get x coordinate of point 2
   222	*    3. double x_3: get x coordinate of point 3
   223	*    4. double angle_1: get degree of angle 1
   224	*    5. double angle_2: get degree of angle 2
   225	*    6. double angle_3: get degree of angle 3
   226	*
   227	*  Function Description: Calculates the x coord of the circumcenter of a triangle
   228	*
   229	***************************************************************************/
   230	double GetCircumC_x (double x_1, double x_2, double x_3, double angle_1, double angle_2, double angle_3)
   231	{
   232	  //---Declarations---
   233	  double circum_x; // x coord circumcenter of the triangle
   234	
   235	  //---Executables---
   236	  circum_x = (x_1 * sin((2 * M_PI * angle_1) / 180) + x_2 * sin((2 * M_PI * angle_2) / 180) + x_3 * sin((2 * M_PI * angle_3) / 180)) / (sin((2 * M_PI * angle_1) / 180) + sin((2 * M_PI * angle_2) / 180) + sin((2 * M_PI * angle_3) / 180));
   237	
   238	  //---Exit---
   239	  return(circum_x);
   240	}
   241	
   242	/***************************************************************************
   243	*
   244	*  Function Information
   245	*
   246	*  Name of Function: GetCircumC_y
   247	*
   248	*  Function Return Type: double 
   249	*
   250	*  Parameters (list data type, name, and comment one per line):
   251	*    1. double x_1: get y coordinate of point 1
   252	*    2. double x_2: get y coordinate of point 2
   253	*    3. double x_3: get y coordinate of point 3
   254	*    4. double angle_1: get degree of angle 1
   255	*    5. double angle_2: get degree of angle 2
   256	*    6. double angle_3: get degree of angle 3
   257	*
   258	*  Function Description: Calculates the y coord of the circumcenter of a triangle
   259	*
   260	***************************************************************************/
   261	double GetCircumC_y (double y_1, double y_2, double y_3, double angle_1, double angle_2, double angle_3)
   262	{
   263	  //---Declarations---
   264	  double circum_y; // y coord of the circumcenter of a triangle
   265	
   266	  //---Executables---
   267	  circum_y = (y_1 * sin((2 * M_PI * angle_1) / 180) + y_2 * sin((2 * M_PI * angle_2) / 180) + y_3 * sin((2 * M_PI * angle_3) / 180)) / (sin((2 * M_PI * angle_1) / 180) + sin((2 * M_PI * angle_2) / 180) + sin((2 * M_PI * angle_3) / 180));
   268	
   269	  //---Exit---
   270	  return(circum_y);
   271	}
   272	
   273	/***************************************************************************
   274	*
   275	*  Function Information
   276	*
   277	*  Name of Function: GetNinePointC_x
   278	*
   279	*  Function Return Type: double 
   280	*
   281	*  Parameters (list data type, name, and comment one per line):
   282	*    1. double orthc_x: get x coord of the orthocenter of a triangle
   283	*    2. double circ_x: get x coord of the circumcenter of a triangle
   284	*
   285	*  Function Description: Calculates the location of x coord of the center of the nine point circle
   286	*
   287	***************************************************************************/
   288	double GetNinePointC_x (double orthc_x, double circ_x)
   289	{
   290	  //---Declarations---
   291	  double center9_x; //x coord of nine point circle center
   292	
   293	  //---Executables---
   294	  center9_x = (orthc_x + circ_x) / 2;
   295	
   296	  //---Exit---
   297	  return(center9_x);
   298	}
   299	
   300	/***************************************************************************
   301	*
   302	*  Function Information
   303	*
   304	*  Name of Function: GetNinePointC_y
   305	*
   306	*  Function Return Type: double 
   307	*
   308	*  Parameters (list data type, name, and comment one per line):
   309	*    1. double orthc_y: get y coord of the orthocenter of a triangle
   310	*    2. double circ_y: get y coord of the circumcenter of a triangle
   311	*
   312	*  Function Description: Calculates the location of y coord of the center of the nine point circle
   313	*
   314	***************************************************************************/
   315	double GetNinePointC_y (double orthc_y, double circ_y)
   316	{
   317	  //---Declarations---
   318	  double center9_y; //y coord of the nine point circle center
   319	
   320	  //---Executables---
   321	  center9_y = (orthc_y + circ_y) / 2;
   322	
   323	  //---Exit---
   324	  return(center9_y);
   325	}
   326	
   327	/***************************************************************************
   328	*
   329	*  Function Information
   330	*
   331	*  Name of Function: CalcDist
   332	*
   333	*  Function Return Type: double
   334	*
   335	*  Parameters (list data type, name, and comment one per line):
   336	*    1. int x_i x coord of starting point
   337	*    2. int y_i y coord of starting point
   338	*    3. int x_f x coord of ending point
   339	*    4. int y_f y coord of ending point
   340	*
   341	*  Function Description: Calculates distance between 2 points
   342	*
   343	***************************************************************************/
   344	double CalcDist (double x_i, double y_i, double x_f, double y_f)
   345	{
   346	  //---Declarations---
   347	  double dist = 0; //Distance between 2 points
   348	
   349	  //---Executables---
   350	  dist = sqrt(pow(x_f - x_i, 2) + pow(y_f - y_i, 2));
   351	
   352	  //---End---
   353	  return(dist);
   354	}
   355	
   356	/***************************************************************************
   357	*
   358	*  Function Information
   359	*
   360	*  Name of Function: CalcAngle
   361	*
   362	*  Function Return Type: double 
   363	*
   364	*  Parameters (list data type, name, and comment one per line):
   365	*    1. double side1: side length 1 of a triangle
   366	*    2. double side2: side length 2 of a triangle
   367	*    3. double side3: side length 3 of a triangle
   368	*
   369	*  Function Description: Calculates a specific angle of a triangle using *  above value
   370	*
   371	***************************************************************************/
   372	double CalcAngle (double side1, double side2, double side3)
   373	{
   374	  //---Declarations--- 
   375	  double angle = 0; //A specific angle of the triangle
   376	
   377	  //---Executables---
   378	  angle = (acos(((pow(side1, 2) + pow(side2, 2) - pow(side3, 2)) / (2 * side1 * side2))) * 180) / M_PI;
   379	  
   380	  //---End---
   381	  return(angle);
   382	}
   383	
   384	/***************************************************************************
   385	*
   386	*  Function Information
   387	*
   388	*  Name of Function: GetTriArea
   389	*
   390	*  Function Return Type: double
   391	*
   392	*  Parameters (list data type, name, and comment one per line):
   393	*    1. side1: length of one side of a triangle
   394	*    2. side2: length of another side of a triangle
   395	*    3. side3: length of last side of a triangle
   396	*
   397	*  Function Description: Calculate area of a triangle given the length of its sides
   398	*
   399	***************************************************************************/
   400	double GetTriArea (double side1, double side2, double side3)
   401	{
   402	  //---Declarations--- 
   403	  double semiP; //Semipermeter of the triangle
   404	  double area; //Area of the triangle
   405	
   406	  //---Executables---
   407	  semiP = (side1 + side2 + side3) / 2;
   408	  area = sqrt(((semiP - side1) * (semiP - side2) * (semiP - side3) * semiP));
   409	
   410	  //---End---
   411	  return(area);
   412	}
   413	
   414	/***************************************************************************
   415	*
   416	*  Function Information
   417	*
   418	*  Name of Function: Output
   419	*
   420	*  Function Return Type: void
   421	*
   422	*  Parameters (list data type, name, and comment one per line):
   423	*    1. double orthc_x x coordinate of the orthocenter
   424	*    2. double orthc_y y coordinate of the orthocenter
   425	*    3. double circ_x x coordinate of the circumcenter
   426	*    4. double circ_y y coordinate of the circumcenter
   427	*    5. double cen9_x x coordinate of the center of the nine point circle
   428	*    6. double cen9_y y coordinate of the center of the nine point circle
   429	*    7. double triArea Area of the triangle created by the points input by the user
   430	*    8. double smallTri_A1 Area of one of the small triangles created by 2 points input by the user and the nine point circle center
   431	*    9. double smallTri_A2 Area of one of the small triangles created by 2 points input by the user and the nine point circle center
   432	*   10. double smallTri_A3 Area of one of the small triangles created by 2 points input by the user and the nine point circle center
   433	*
   434	*  Function Description: This function will recieving the parameters 1-6 and output them. Then the function will determine if parameter 7 is very close to the sum of parameters 8-10. If the sum is very close, it will output that the point is in the triangle, and if the sum is not that close, then it will output that the point is outside the triangle.
   435	*
   436	***************************************************************************/
   437	void Output (double orthc_x, double orthc_y, double circ_x, double circ_y, double cen9_x, double cen9_y, double triArea, double smallTri_A1, double smallTri_A2, double smallTri_A3)
   438	{
   439	  //---Executables---
   440	  printf("\nCoordinates of orthocenter: %0.2lf, %0.2lf", orthc_x, orthc_y);
   441	  printf("\nCoordinates of circumcenter: %0.2lf, %0.2lf", circ_x, circ_y);
   442	
   443	  if (fabs(triArea - (smallTri_A1 + smallTri_A2 + smallTri_A3)) < 0.001 )
   444	  {
   445	    printf("\nThe nine point circle center: %0.2lf, %0.2lf is inside of the triangle.\n", cen9_x, cen9_y);
   446	  }
   447	  else
   448	  {
   449	    printf("\nThe nine point circle center: %0.2lf, %0.2lf is outside of the triangle.\n", cen9_x, cen9_y);
   450	  }
   451	}
