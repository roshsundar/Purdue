The following program submission has been recorded:

Student: rmsundar
Class: CS159
Section: 15906
Assignment: lab05.c
Submission: 2021-03-03 19:52

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. rmsundar@purdue.edu
     5	*  2. mcouso@purdue.edu
     6	*  3. jiang781@purdue.edu
     7	*
     8	*  Lab #: 5
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: DIST
    17	*
    18	*  Program Description: User inputs three points (A, B, C) that will always create a triangle with a positive area. Program will calculate and output the measures of its three internal angles and the areas of the three quadrilaterals (Area A, Area B, Area C) created when a perpendicular lines are connected from the incenter to each side of the triangle
    19	*
    20	***************************************************************************/
    21	
    22	#include <stdio.h>
    23	#include <math.h>
    24	
    25	void Input (double*, double*, double*, double*, double*, double*);
    26	double CalcInCen_X (double, double, double, double, double, double);
    27	double CalcInCen_Y (double d_12, double d_23, double d_31, double y_1, double y_2, double y_3);
    28	double CalcDist (double, double, double, double);
    29	double CalcAngle (double, double, double);
    30	double CalcMin (double);
    31	double CalcSec (double);
    32	double CalcArea (double, double);
    33	void Output (double, double, double, double, double, double, double, double, double, double, double, double);
    34	
    35	int main (void)
    36	{
    37	  //---Declarations---
    38	  double x_1 = 0; // x coord of point 1
    39	  double y_1 = 0; // y coord of point 1
    40	  double x_2 = 0; // x coord of point 2
    41	  double y_2 = 0; // y coord of point 2
    42	  double x_3 = 0; // x coord of point 3
    43	  double y_3 = 0; // y coord of point 3
    44	
    45	  double d_12 = 0; // Distance from point 1 to point 2
    46	  double d_23 = 0; // Distance from point 2 to point 3
    47	  double d_31 = 0; // Distance from point 3 to point 1
    48	
    49	  double incen_x = 0; //x coorcinate of the incenter
    50	  double incen_y = 0; //y coorcinate of the incenter
    51	
    52	  double d_i1 = 0; //distance from the incenter to point 1
    53	  double d_i2 = 0; //distance from the incenter to point 2
    54	  double d_i3 = 0; //distance from the incenter to point 3
    55	
    56	  double angle_1_degree = 0; //The degree of angle 1
    57	  double angle_2_degree = 0; //The degree of angle 2
    58	  double angle_3_degree = 0; //The degree of angle 3
    59	  double angle_1_minute = 0; //The minute of angle 1
    60	  double angle_2_minute = 0; //The minute of angle 2
    61	  double angle_3_minute = 0; //The minute of angle 3
    62	  double angle_1_second = 0; //The second of angle 1
    63	  double angle_2_second = 0; //The second of angle 2
    64	  double angle_3_second = 0; //The second of angle 3
    65	
    66	  double area_1 = 0; //area of quadrilateral 1
    67	  double area_2 = 0; //area of quadrilateral 2
    68	  double area_3 = 0; //area of quadrilateral 3
    69	
    70	  //---Executables---
    71	  Input (&x_1, &y_1, &x_2, &y_2, &x_3, &y_3);
    72	  d_12 = CalcDist(x_1, y_1, x_2, y_2);
    73	  d_23 = CalcDist(x_2, y_2, x_3, y_3);
    74	  d_31 = CalcDist(x_3, y_3, x_1, y_1);
    75	
    76	  incen_x = CalcInCen_X (d_12, d_23, d_31, x_1, x_2, x_3);
    77	  incen_y = CalcInCen_Y (d_12, d_23, d_31, y_1, y_2, y_3);
    78	  d_i1 = CalcDist (x_1, y_1, incen_x, incen_y);
    79	  d_i2 = CalcDist (x_2, y_2, incen_x, incen_y);
    80	  d_i3 = CalcDist (x_3, y_3, incen_x, incen_y);
    81	
    82	  angle_1_degree = CalcAngle (d_31, d_12, d_23);
    83	  angle_2_degree = CalcAngle (d_23, d_12, d_31);
    84	  angle_3_degree = CalcAngle(d_31, d_23, d_12);
    85	  
    86	  angle_1_minute = CalcMin(angle_1_degree);
    87	  angle_2_minute = CalcMin(angle_2_degree);
    88	  angle_3_minute = CalcMin(angle_3_degree);
    89	
    90	  angle_1_second = CalcSec(angle_1_minute);
    91	  angle_2_second = CalcSec(angle_2_minute);
    92	  angle_3_second = CalcSec(angle_3_minute);
    93	  
    94	  area_1 = CalcArea (d_i1, angle_1_degree);
    95	  area_2 = CalcArea (d_i2, angle_2_degree);
    96	  area_3 = CalcArea (d_i3, angle_3_degree);
    97	
    98	  Output((int)angle_1_degree,(int)angle_2_degree, (int)angle_3_degree, (int)angle_1_minute, (int)angle_2_minute, (int)angle_3_minute, angle_1_second, angle_2_second, angle_3_second, area_1, area_2, area_3);
    99	  
   100	  //---End---
   101	  return (0);
   102	}
   103	
   104	/***************************************************************************
   105	*
   106	*  Function Information
   107	*
   108	*  Name of Function: Input
   109	*
   110	*  Function Return Type: void
   111	*
   112	*  Parameters (list data type, name, and comment one per line):
   113	*    1. double *x_1 memory address of x_1 in main() 
   114	*    2. double *y_1 memory address of y_1 in main() 
   115	*    3. double *x_2 memory address of x_2 in main() 
   116	*.   4. double *y_2 memory address of y_2 in main() 
   117	*    5. double *x_3 memory address of x_3 in main() 
   118	*.   6. double *y_3 memory address of y_3 in main() 
   119	*
   120	*  Function Description: Gets user input and fills above variables
   121	*
   122	***************************************************************************/
   123	void Input (double *x_1, double *y_1, double *x_2, double *y_2, double *x_3, double *y_3)
   124	{
   125	  //---Executables---
   126	  printf("Enter X coordinate #1 -> ");
   127	  scanf("%lf", x_1);
   128	
   129	  printf("Enter Y coordinate #1 -> ");
   130	  scanf("%lf", y_1);
   131	
   132	  printf("Enter X coordinate #2 -> ");
   133	  scanf("%lf", x_2);
   134	
   135	  printf("Enter Y coordinate #2 -> ");
   136	  scanf("%lf", y_2);
   137	
   138	  printf("Enter X coordinate #3 -> ");
   139	  scanf("%lf", x_3);
   140	
   141	  printf("Enter Y coordinate #3 -> ");
   142	  scanf("%lf", y_3);
   143	}
   144	
   145	/***************************************************************************
   146	*
   147	*  Function Information
   148	*
   149	*  Name of Function: CalcInCen_X
   150	*
   151	*  Function Return Type: double 
   152	*
   153	*  Parameters (list data type, name, and comment one per line):
   154	*    1. double d_12: distance between point 1 and 2
   155	*    2. double d_23: distance between point 2 and 3
   156	*    3. double d_31: distance between point 3 and 1
   157	*    4. double x_1: x coord of point 1
   158	*    5. double x_2: x coord of point 2
   159	*    6. double x_3: x coord of point 3
   160	*
   161	*  Function Description: Calculates x coord of incenter using variables above
   162	*
   163	***************************************************************************/
   164	double CalcInCen_X (double d_12, double d_23, double d_31, double x_1, double x_2, double x_3)
   165	{
   166	  //---Declarations---
   167	  double incen_x = 0; // x coord of incenter
   168	
   169	  //---Executables---
   170	  incen_x = ((d_12 * x_3) + (d_23 * x_1) + (d_31 * x_2)) / (d_12 + d_23 + d_31);
   171	
   172	  //---End---
   173	  return(incen_x);
   174	}
   175	
   176	/***************************************************************************
   177	*
   178	*  Function Information
   179	*
   180	*  Name of Function: CalcInCen_Y
   181	*
   182	*  Function Return Type: double
   183	*
   184	*  Parameters (list data type, name, and comment one per line):
   185	*    1. double d_12 distance between point 1 and 2
   186	*    2. double d_23 distance between point 2 and 3
   187	*    3. double d_31 distance between point 3 and 1
   188	*    4. int y_1 y coord of point 1
   189	*    5. int y_2 y coord of point 2
   190	*    6. int y_3 y coord of point 3
   191	*
   192	*  Function Description: Calculates y coord of incenter using variables above
   193	*
   194	***************************************************************************/
   195	double CalcInCen_Y (double d_12, double d_23, double d_31, double y_1, double y_2, double y_3)
   196	{
   197	  //---Declarations---
   198	  double incen_y = 0; // y coord of incenter
   199	
   200	  //---Executables---
   201	  incen_y = ((d_12 * y_3) + (d_23 * y_1) + (d_31 * y_2)) / (d_12 + d_23 + d_31);
   202	
   203	  //---End---
   204	  return(incen_y);
   205	}
   206	
   207	/***************************************************************************
   208	*
   209	*  Function Information
   210	*
   211	*  Name of Function: CalcDist
   212	*
   213	*  Function Return Type: double
   214	*
   215	*  Parameters (list data type, name, and comment one per line):
   216	*    1. int x_i x coord of starting point
   217	*    2. int y_i y coord of starting point
   218	*    3. int x_f x coord of ending point
   219	*    4. int y_f y coord of ending point
   220	*
   221	*  Function Description: Calculates distance between 2 points
   222	*
   223	***************************************************************************/
   224	double CalcDist (double x_i, double y_i, double x_f, double y_f)
   225	{
   226	  //---Declarations---
   227	  double dist = 0; // Distance between 2 points
   228	
   229	  //---Executables---
   230	  dist = sqrt(pow(x_f - x_i, 2) + pow(y_f - y_i, 2));
   231	
   232	  //---End---
   233	  return(dist);
   234	}
   235	
   236	/***************************************************************************
   237	*
   238	*  Function Information
   239	*
   240	*  Name of Function: CalcAngle
   241	*
   242	*  Function Return Type: double 
   243	*
   244	*  Parameters (list data type, name, and comment one per line):
   245	*    1. double side1: side lenght 1 of a triangle
   246	*    2. double side2: side lenght 2 of a triangle
   247	*    3. double side3: side lenght 3 of a triangle
   248	*
   249	*  Function Description: Calculates a specific angle of a triangle using *  above value
   250	*
   251	***************************************************************************/
   252	double CalcAngle (double side1, double side2, double side3)
   253	{
   254	  //---Declarations--- 
   255	  double angle = 0; //a specific angle of the triangle
   256	
   257	  //---Executables---
   258	  angle = (acos(((pow(side1, 2) + pow(side2, 2) - pow(side3, 2)) / (2 * side1 * side2))) * 180) / M_PI;
   259	  
   260	  //---End---
   261	  return(angle);
   262	}
   263	
   264	/***************************************************************************
   265	*
   266	*  Function Information
   267	*
   268	*  Name of Function: CalcMin
   269	*
   270	*  Function Return Type: double
   271	*
   272	*  Parameters (list data type, name, and comment one per line):
   273	*    1. double degree The degree component of the angle
   274	*
   275	*  Function Description: Using the conversion, this function computes 
   276	*  the minute component of the angle
   277	*
   278	***************************************************************************/
   279	double CalcMin (double degree)
   280	{
   281	  //---Declarations--- 
   282	  int conversion_F = 60; //conversion factor from degree ot minute
   283	  double min = 0; //the minute of a specific angle
   284	
   285	  //---Executables---
   286	  min = (degree - (int) degree) * conversion_F; 
   287	
   288	  //---End---
   289	  return(min);
   290	}
   291	
   292	/***************************************************************************
   293	*
   294	*  Function Information
   295	*
   296	*  Name of Function: CalcSec
   297	*
   298	*  Function Return Type: double
   299	*
   300	*  Parameters (list data type, name, and comment one per line):
   301	*    1. double min The minute component of the angle
   302	*
   303	*  Function Description: Using the conversion, this function computes the second component of the angle
   304	*
   305	***************************************************************************/
   306	double CalcSec (double min)
   307	{
   308	  //---Declarations--- 
   309	  int conversion_F = 60; //conversion factor from minute to degree
   310	  double sec = 0; //the seconds of a specific angle
   311	  
   312	  //---Executables---
   313	  sec = (min - (int) min) * conversion_F; 
   314	
   315	  //---End---
   316	  return(sec);
   317	}
   318	
   319	/***************************************************************************
   320	*
   321	*  Function Information
   322	*
   323	*  Name of Function: Calc Area
   324	*
   325	*  Function Return Type: double
   326	*
   327	*  Parameters (list data type, name, and comment one per line):
   328	*    1. double dist The distance between the incenter and the specified point
   329	*    2. double angle The angle measure before it was converted
   330	*  
   331	*  Function Description: This function finds the area of the specified quadrilateral.
   332	*
   333	***************************************************************************/
   334	double CalcArea (double dist, double angle)
   335	{
   336	  //---Declarations--- 
   337	  double area = 0; // Area of internal quadrilaterals
   338	  
   339	  //---Executables---
   340	  area = pow(dist, 2) * sin((angle / 2) * (M_PI / 180)) * cos(((angle / 2) * M_PI) / 180);
   341	  
   342	  //---End---
   343	  return(area);
   344	}
   345	
   346	/***************************************************************************
   347	*
   348	*  Function Information
   349	*
   350	*  Name of Function: Output
   351	*
   352	*  Function Return Type: void
   353	*
   354	*  Parameters (list data type, name, and comment one per line):
   355	*    1. double angle_1_degree The degree component of the angle 1
   356	*    2. double angle_2_degree The degree component of the angle 2
   357	*    3. double angle_3_degree The degree component of the angle 3
   358	*    4. double angle_1_minute The minute component of the angle 1
   359	*    5. double angle_2_minute The minute component of the angle 2
   360	*    6. double angle_3_minute The minute component of the angle 3
   361	*    7. double angle_1_second The second component of the angle 1
   362	*    8. double angle_2_second The second component of the angle 2
   363	*    9. double angle_3_second The second component of the angle 3
   364	*    10. double area_1 The area of quadrilateral 1
   365	*    11. double area_2 The area of quadrilateral 2
   366	*    12. double area_3 The area of quadrilateral 3
   367	*
   368	*  Function Description: Outputs the above variables.
   369	*
   370	***************************************************************************/
   371	void Output (double angle_1_degree, double angle_2_degree, double angle_3_degree, double angle_1_minute, double angle_2_minute, double angle_3_minute, double angle_1_second, double angle_2_second, double angle_3_second, double area_1, double area_2, double area_3)
   372	{
   373	  //---Executables---
   374	  printf("\n\nInternal triangle angles: %0.0lf%c%c %0.0lf\' %0.2lf\", %0.0lf%c%c %0.0lf\' %0.2lf\", %0.0lf%c%c %0.0lf\' %0.2lf\"", angle_1_degree, 0xC2, 0xB0, angle_1_minute, angle_1_second, angle_2_degree, 0xC2, 0xB0, angle_2_minute, angle_2_second,angle_3_degree, 0xC2, 0xB0, angle_3_minute, angle_3_second);
   375	
   376	  printf("\nArea of quadrilaterals: %0.2lf, %0.2lf, %0.2lf\n", area_1, area_2, area_3);
   377	}
