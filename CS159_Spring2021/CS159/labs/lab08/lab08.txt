The following program submission has been recorded:

Student: rmsundar
Class: CS159
Section: 15906
Assignment: lab08.c
Submission: 2021-03-31 19:04

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. mcouso@purdue.edu
     5	*  2. rmsundar@purdue.edu
     6	*  3. jiang781@purdue.edu
     7	*
     8	*  Lab #: 08
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Asynchronous Online
    17	*
    18	*  Program Description: User inputs a range of non-negative decimal (base 10) integer value. Program displays the smallest value in the range that represent the largest change in odd and even digits when comparing the decimal value to its octal (base 8) equivalent
    19	*
    20	************************************************************************/
    21	
    22	#include <stdio.h>
    23	#include <math.h>
    24	
    25	void getInput(int*, int*);
    26	int getOctalValue(int);
    27	int CountEvenDigits(int);
    28	int CountOddDigits(int);
    29	void GetLargestOdd(int, int, int*, int*, int*);
    30	void GetLargestEven(int, int, int*, int*, int*);
    31	void Output(int, int, int, int, int, int);
    32	
    33	int main(void)
    34	{
    35	  //---Declarations---
    36	  int starting_value = 0; //The beginning decimal 
    37	  int ending_Value = 0; //The ending decimal
    38	
    39	  int odd_decimal = 0; //The decimal in the range which has the largest odd digit changes
    40	  int odd_octal = 0; //The octal value for the decimal in the range which has the largest odd digit changes
    41	  int odd_digit_change = 0; //The odd digit change from decimal to octal
    42	
    43	  int even_decimal = 0; //The decimal within the range which has the largest even digit changes
    44	  int even_octal = 0; //The octal value for the decimal within the range which has the largest even digit changes
    45	  int even_digit_change = 0; //The even digit change from decimal to octal
    46	
    47	  //---Executables---
    48	  getInput(&starting_value, &ending_Value);
    49	  GetLargestOdd(starting_value, ending_Value, &odd_decimal, &odd_octal, &odd_digit_change);
    50	  GetLargestEven(starting_value, ending_Value, &even_decimal, &even_octal, &even_digit_change);
    51	  Output(odd_decimal, even_decimal, odd_digit_change, even_digit_change, odd_octal, even_octal);
    52	  
    53	  //---Exit---
    54	  return(0);
    55	}
    56	
    57	/***************************************************************************
    58	*
    59	*  Function Information
    60	*
    61	*  Name of Function: getInput
    62	*
    63	*  Function Return Type: void
    64	*
    65	*  Parameters (list data type, name, and comment one per line):
    66	*    1. int *starting_value: points to starting_value variable in main()
    67	*    2. int *ending_value: points to ending_value variable in main()
    68	*
    69	*  Function Description: Gets starting and ending decimal values from the user, and returns them to main()
    70	*
    71	***************************************************************************/
    72	void getInput(int *starting_value, int *ending_value)
    73	{
    74	  //---Executables---
    75	  do
    76	  {
    77	    printf("Enter starting decimal value -> ");
    78	    scanf("%d", starting_value);
    79	    
    80	    if (*starting_value < 0)
    81	    {
    82	      printf("\nError! The decimal value provided should be non-negative.\n\n");
    83	    }
    84	  } while (*starting_value < 0);
    85	
    86	  do
    87	  {
    88	    printf("Enter ending decimal value -> ");
    89	    scanf("%d", ending_value);
    90	    
    91	    if (*ending_value <= *starting_value)
    92	    {
    93	      printf("\nError! The ending value provided should be greater than %d.\n\n", *starting_value);
    94	    }
    95	  } while (*ending_value <= *starting_value);
    96	}
    97	
    98	/***************************************************************************
    99	*
   100	*  Function Information
   101	*
   102	*  Name of Function: getOctalValue
   103	*
   104	*  Function Return Type: int
   105	*
   106	*  Parameters (list data type, name, and comment one per line):
   107	*    1. int value The value of the decimal input by the user
   108	*    
   109	*  Function Description: Takes the decimal input by the user and converts it into an octal (base 8) form.
   110	*
   111	***************************************************************************/
   112	int getOctalValue(int value)
   113	{
   114	  //---Declarations---
   115	  int octal_Value = 0; //octal (base 8) equivalent to the parameter 
   116	  int quotient; //the remaining value of parameter divided by 8
   117	  int count = 0; //counts the number of the iterations
   118	  
   119	  //---Executables--- 
   120	  if (value < 8)
   121	  {
   122	    octal_Value = value;
   123	  }
   124	  
   125	  while (value != 0)
   126	  {
   127	    quotient = value % 8;
   128	    value = value / 8;
   129	    octal_Value = quotient * (pow(10, count)) + octal_Value;
   130	    count = count + 1;
   131	  }
   132	  
   133	  //---Exit---
   134	  return (octal_Value);
   135	}
   136	
   137	/***************************************************************************
   138	*
   139	*  Function Information
   140	*
   141	*  Name of Function: CountEvenDigits
   142	*
   143	*  Function Return Type: int
   144	*
   145	*  Parameters (list data type, name, and comment one per line):
   146	*    1. int value The value of the decimal input by the user
   147	*    
   148	*  Function Description: Counts the even digits of the decimal in decimal (base 10) and octal (base 8) form.
   149	*
   150	***************************************************************************/
   151	int CountEvenDigits(int value)
   152	{
   153	  //---Declarations---
   154	  int even_count = 0; // Stores the count of even numbers in value
   155	  int rem = 0; // Stores the current digit/remainder in the value
   156	  
   157	  //---Executables---
   158	  while(value > 0)
   159	  {
   160	    rem = value % 10;
   161	    if(rem % 2 == 0)
   162	    {
   163	      even_count++;
   164	    }
   165	    value /= 10;
   166	  }
   167	
   168	  //---Exit---
   169	  return(even_count);
   170	}
   171	
   172	/***************************************************************************
   173	*
   174	*  Function Information
   175	*
   176	*  Name of Function: CountOddDigits
   177	*
   178	*  Function Return Type: int
   179	*
   180	*  Parameters (list data type, name, and comment one per line):
   181	*    1. int value The value of the decimal input by the user
   182	*
   183	*  Function Description: Counts the odd digits of the decimal in decimal (base 10) and octal (base 8) form.
   184	*
   185	***************************************************************************/
   186	int CountOddDigits(int value)
   187	{
   188	  //---Declarations---
   189	  int odd_count = 0; //The number of odd digits in the number.
   190	  int rem = 0; //The remainder after dividing the value by 10.
   191	  
   192	  //---Executables--- 
   193	  while(value > 0)
   194	  {
   195	    rem = value % 10;
   196	    if(rem % 2 == 1)
   197	    {
   198	      odd_count++;
   199	    }
   200	    
   201	    value /= 10; 
   202	  }
   203	
   204	  //---Exit---
   205	  return(odd_count);
   206	}
   207	
   208	/***************************************************************************
   209	*
   210	*  Function Information
   211	*
   212	*  Name of Function: GetLargestOdd
   213	*
   214	*  Function Return Type: void
   215	*
   216	*  Parameters (list data type, name, and comment one per line):
   217	*    1. int beginning: beginning decimal
   218	*    2. int ending: the ending decimal
   219	*    3. int *odd_decimal: mempry address of the odd_decimal in mai()
   220	*    4. int *odd_octal: mempry address of the odd_octal in mai()
   221	*.   5. int *odd_digit_change: mempry address of the        * * * odd_digit_change in main()
   222	*
   223	*  Function Description: Finds the smallest decimal and octal value that has the largest odd digit change when going from decimal to octal equivalent.Find the decimal that has the largest odd digit changes within a range
   224	*
   225	********************************************** *****************************/
   226	void GetLargestOdd(int beginning, int ending, int *odd_decimal, int *odd_octal, int *odd_digit_change) 
   227	{
   228	  //---Declarations---
   229	  int index = beginning; //The beginning decimal 
   230	  int octal; //The octal value of index
   231	  int oddChange; //The change in odd digits from decimal to octal
   232	  
   233	  int tempDecimal = 0; //Temporary store the the decimal that has the largest odd digit change
   234	  int tempOcatal = 0; //Temporatily stores the octal equivalent of the decimal that has the largest odd digit change
   235	  int tempOddChange = 0; //Temporary store the largest odd digit changes
   236	
   237	  //---Executables--
   238	  while (index <= ending)
   239	  {
   240	    octal = getOctalValue(index);
   241	    oddChange = CountOddDigits(index) - CountOddDigits(octal);
   242	    
   243	    if(fabs((double)oddChange) > fabs((double)tempOddChange))
   244	    {
   245	      tempDecimal = index;
   246	      tempOcatal = octal;
   247	      tempOddChange = oddChange;
   248	
   249	    }
   250	    else if (fabs((double)oddChange) == fabs((double)tempOddChange) && index < tempDecimal)
   251	    {
   252	      tempDecimal = index;
   253	      tempOcatal = octal;
   254	      tempOddChange = oddChange;
   255	    }
   256	
   257	    index += 1;
   258	  }
   259	
   260	  *odd_decimal = tempDecimal;
   261	  *odd_octal = tempOcatal;
   262	  *odd_digit_change = tempOddChange;
   263	}
   264	
   265	/***************************************************************************
   266	*
   267	*  Function Information
   268	*
   269	*  Name of Function: GetLargestEven
   270	*
   271	*  Function Return Type: void
   272	*
   273	*  Parameters (list data type, name, and comment one per line):
   274	*    1. int beginning The starting decimal value 
   275	*    2. int ending the ending decimal value
   276	*    3. int *even_decimal points to even_decimal in main()
   277	*    4. int *even_octal points to even octal in main()
   278	*    5. int *even_digit_change points to even_digit_change in main()
   279	*
   280	*  Function Description: Finds the smallest decimal and octal value that has the largest even digit change when going from decimal to octal equivalent.
   281	*
   282	***************************************************************************/
   283	void GetLargestEven(int beginning, int ending, int *even_decimal, int *even_octal, int *even_digit_change)
   284	{
   285	  //---Declarations---
   286	  int index = beginning;  //The beginning decimal
   287	  int octal; //The octal value of index
   288	  int evenChange;  //The even digit changes between octal value and the original decimal 
   289	  
   290	  int tempDecimal = 0; //Temporary store the the decimal that has the largest even digit change
   291	  int tempOctal = 0; //Temporatily stores the octal equivalent of the decimal that has the largest even digit change
   292	  int tempEvenChange = 0; //Temporary store the largest even digit changes
   293	
   294	  //---Executables--
   295	  while (index <= ending)
   296	  {
   297	    octal = getOctalValue(index);
   298	    evenChange = CountEvenDigits(index) - CountEvenDigits(octal);
   299	
   300	    if(fabs((double)evenChange) > fabs((double)tempEvenChange))
   301	    {
   302	      tempDecimal = index;
   303	      tempOctal = octal;
   304	      tempEvenChange = evenChange;
   305	    }
   306	    else if (fabs((double)evenChange) == fabs((double)tempEvenChange) && index < tempDecimal)
   307	    {
   308	      tempDecimal = index;
   309	      tempOctal = octal;
   310	      tempEvenChange = evenChange;
   311	    }
   312	
   313	    index += 1;
   314	  }
   315	  *even_decimal = tempDecimal;
   316	  *even_octal = tempOctal;
   317	  *even_digit_change = tempEvenChange;
   318	}
   319	
   320	/***************************************************************************
   321	*
   322	*  Function Information
   323	*
   324	*  Name of Function: Output
   325	*
   326	*  Function Return Type: void
   327	*
   328	*  Parameters (list data type, name, and comment one per line):
   329	*    1. int oddDecimal: The decimal in the range which has the largest odd digit changes
   330	*    2. int evenDecimal: The decimal within the range which has the largest even digit changes
   331	*    3. int oddChanges: The odd digit change from decimal to octalThe odd digit changes
   332	*    4. int evenChanges: The even digit change from decimal to octalThe even digit changes
   333	*    5. int oddOctal: The octal value for the decimal in the range which has the largest odd digit changesThe octal value of the decimal that has the largest odd digit changes 
   334	*    6. int evenOctal: The octal value for the decimal within the range which has the largest even digit changesThe octal value of the decimal that has the largest even digit changes 
   335	*
   336	*  Function Description: Displays the above parameters
   337	*
   338	***************************************************************************/
   339	void Output(int oddDecimal, int evenDecimal, int oddChanges, int evenChanges, int oddOctal, int evenOctal)
   340	{
   341	  //---Executables--
   342	  printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-Change-Decimal-=-Octal-");
   343	
   344	  printf("\nLargest odd digit change: %7d %7d %7d", oddChanges, oddDecimal, oddOctal);
   345	  printf("\nLargest even digit change: %6d %7d %7d\n", evenChanges, evenDecimal, evenOctal);
   346	}
