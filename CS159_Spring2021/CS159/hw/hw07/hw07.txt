The following program submission has been recorded:

Student: rmsundar
Class: CS159
Section: 15906
Assignment: hw07.c
Submission: 2021-04-24 23:30

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmer and Purdue Email Address:
     4	*  1. rmsundar@purdue.edu
     5	*
     6	*  Homework #: 7
     7	*
     8	*  Academic Integrity Statement:
     9	*
    10	*  I have not used source code obtained from any other unauthorized source,
    11	*  either modified or unmodified.  Neither have I provided access to my code
    12	*  to another. The effort I am submitting is my own original work.
    13	*
    14	*  Day, Time, Location of Lab: DIST
    15	*
    16	*  Program Description: The user will specify whether they wish the data set to be (1) sorted by the count of the number of applications of the steps necessary to reach 1 or (2) sorted by the first power of two encountered during the application of the steps. The positive integer data set will follow that includes at least one value with a maximum number of 35
    17	values.
    18	*
    19	***************************************************************************/
    20	#include <stdio.h>
    21	
    22	#define SIZE 35
    23	
    24	void Input (int [], int *, int *);
    25	int IsPowerOf2(int);
    26	void Sort (int [], int [], int);
    27	void SortList_Count (int [], int [], int);
    28	void SortList_Power2 (int [], int [], int);
    29	void Output(int [], int , int);
    30	
    31	int main(void)
    32	{
    33	  //---Declarations---
    34	  int option = 0; // 1 or 2, representing count/power-by-2 sorting methods respectively 
    35	  int inputList [SIZE] = {0}; // List of positive ints entered by user
    36	  int sortList [SIZE] = {0}; // Sorted int list derived from count/power-by-2
    37	  int lastIndex = SIZE; // Index of the last input element in inputList & sortList
    38	
    39	  //---Executables---
    40	  Input(inputList, &lastIndex, &option);
    41	  
    42	  Sort(inputList, sortList, lastIndex);
    43	
    44	  option == 1 ? SortList_Count(inputList, sortList, lastIndex) : SortList_Power2(inputList, sortList, lastIndex);
    45	
    46	  Sort(sortList, inputList, lastIndex);
    47	
    48	  Output(inputList, lastIndex, option);
    49	
    50	  //---Exit---
    51	  return(0);
    52	}
    53	
    54	/***************************************************************************
    55	*
    56	*  Function Information
    57	*
    58	*  Name of Function: Input
    59	*
    60	*  Function Return Type: void
    61	*
    62	*  Parameters (list data type, name, and comment one per line):
    63	*    1. int inputList [] // pointer to inputList [] variable in main()
    64	*    2. int *lastIndex // pointer to lastIndex variable in main()
    65	*    3. int *option // pointer to option option variable in main()
    66	*
    67	*  Function Description: Accepts input from user and returns them to main() via above pointers
    68	*
    69	***************************************************************************/
    70	void Input (int inputList [], int *lastIndex, int *option)
    71	{
    72	  //---Declarations---
    73	  int i; // Loop control condition
    74	
    75	  //---Executables---
    76	  do
    77	  {
    78	    printf("Enter sorting option (1) count or (2) power of two -> ");
    79	    scanf("%d", option);
    80	
    81	    if (*option != 1 && *option != 2)
    82	    {
    83	      printf("\nError! Enter option 1 or 2 only!\n\n");
    84	    }
    85	  } while (*option != 1 && *option != 2);
    86	
    87	  printf("Enter up to 35 integer values -> ");
    88	  for (i = 0; i < SIZE; i++)
    89	  {
    90	    scanf("%d", &inputList[i]);
    91	      
    92	    if (inputList[i] == -1) 
    93	    {
    94	      *lastIndex = i;
    95	      i = SIZE;
    96	    }
    97	  }
    98	}
    99	
   100	/***************************************************************************
   101	*
   102	*  Function Information
   103	*
   104	*  Name of Function: IsPowerOf2
   105	*
   106	*  Function Return Type: int
   107	*
   108	*  Parameters (list data type, name, and comment one per line):
   109	*    1. int n // Positive integer
   110	*
   111	*  Function Description: Determine if n is a power of 2. Return 1 if it is, 0 if not
   112	*
   113	***************************************************************************/
   114	int IsPowerOf2(int n)
   115	{
   116	  //---Executables---
   117	  while (((n % 2) == 0) && n > 1)
   118	  {
   119	    n /= 2;
   120	  }
   121	    
   122	  if (n != 1)
   123	  {
   124	    n = 0;
   125	  }
   126	
   127	  //---Exit---
   128	  return(n);
   129	}
   130	
   131	/***************************************************************************
   132	*
   133	*  Function Information
   134	*
   135	*  Name of Function: Sort
   136	*
   137	*  Function Return Type: void
   138	*
   139	*  Parameters (list data type, name, and comment one per line):
   140	*    1. int mainList [] // List that will be properly sorted
   141	*    2. int secondaryList [] // List that will experience exchange with same indicies in mainList
   142	*    3. int lastIndex // index of last element in mainList and secondaryList
   143	*
   144	*  Function Description: Loop over elements in mainList and sort from smallest->largest. When exchange occurs, secondaryList also exchanges with same indicies
   145	*
   146	***************************************************************************/
   147	void Sort (int mainList [], int secondaryList [], int lastIndex)
   148	{
   149	  //---Declarations---
   150	  int numPasses; //LCV THAT CONTROLS # OF PASSES
   151	  int lcv; //LOOP CONTROL VARIABLE FOR SORTING
   152	  int temp; //HOLDS VALUE DURING SWAP
   153	
   154	  //---Executables---
   155	  for(numPasses = 1; numPasses < lastIndex; numPasses++)
   156	  {
   157	    for(lcv = 0; lcv < lastIndex - numPasses; lcv++)
   158	    {
   159	      if(mainList[lcv] > mainList[lcv + 1])
   160	      {
   161	        temp = mainList[lcv];
   162	        mainList[lcv] = mainList[lcv + 1];
   163	        mainList[lcv + 1] = temp;
   164	
   165	        temp = secondaryList[lcv];
   166	        secondaryList[lcv] = secondaryList[lcv + 1];
   167	        secondaryList[lcv + 1] = temp;
   168	      }
   169	    }
   170	  }
   171	}
   172	
   173	/***************************************************************************
   174	*
   175	*  Function Information
   176	*
   177	*  Name of Function: SortList_Count
   178	*
   179	*  Function Return Type: void
   180	*
   181	*  Parameters (list data type, name, and comment one per line):
   182	*    1. int inputList [] // List of positive ints entered by user
   183	*    2. int sortList [] // Sorted int list derived from count/power-by-2
   184	*    3. int lastIndex // Index of the last input element in inputList & sortList
   185	*
   186	*  Function Description: Calculate values to be in sortList via the count method
   187	*
   188	***************************************************************************/
   189	void SortList_Count (int inputList [], int sortList [], int lastIndex)
   190	{
   191	  //---Declarations---
   192	  int i; // Loop control condition
   193	  int currVal; // Current value in inputList
   194	  int count; // Number of iterations to get currVal to 1
   195	
   196	  //---Executables---
   197	  for (i = 0; i < lastIndex; i++)
   198	  {
   199	    currVal = inputList[i];
   200	    count = 0;
   201	
   202	    while (currVal != 1)
   203	    {
   204	      currVal = currVal % 2 == 0 ? currVal / 2 : (3 * currVal) + 1;
   205	      count++;
   206	    }
   207	
   208	    sortList[i] = count;
   209	  }
   210	}
   211	
   212	/***************************************************************************
   213	*
   214	*  Function Information
   215	*
   216	*  Name of Function: SortList_Power2
   217	*
   218	*  Function Return Type: void
   219	*
   220	*  Parameters (list data type, name, and comment one per line):
   221	*    1. int inputList [] // List of positive ints entered by user
   222	*    2. int sortList [] // Sorted int list derived from count/power-by-2
   223	*    3. int lastIndex // Index of the last input element in inputList & sortList
   224	*
   225	*  Function Description: Calculate values to be in sortList via the power-of-2 method
   226	*
   227	***************************************************************************/
   228	void SortList_Power2 (int inputList [], int sortList [], int lastIndex)
   229	{
   230	  //---Declarations---
   231	  int i; // Loop control condition
   232	  int currVal; // Current value in inputList
   233	
   234	  //---Executables---
   235	  for (i = 0; i < lastIndex; i++)
   236	  {
   237	    currVal = inputList[i];
   238	
   239	    while (IsPowerOf2(currVal) == 0)
   240	    {
   241	      currVal = currVal % 2 == 0 ? currVal / 2 : (3 * currVal) + 1;
   242	    }
   243	
   244	    sortList[i] = currVal;
   245	  }
   246	}
   247	
   248	/***************************************************************************
   249	*
   250	*  Function Information
   251	*
   252	*  Name of Function: Output
   253	*
   254	*  Function Return Type: void
   255	*
   256	*  Parameters (list data type, name, and comment one per line):
   257	*    1. int inputList [] // List of positive ints entered by user
   258	*    2. int lastIndex // Index of the last input element in inputList & sortList
   259	*    3. int option // 1 or 2, representing count/power-by-2 sorting methods respectively
   260	*
   261	*  Function Description: Display the sorted inputList
   262	*
   263	***************************************************************************/
   264	void Output(int inputList [], int lastIndex, int option)
   265	{
   266	  //---Declarations---
   267	  int i; // Loop control condition
   268	
   269	  //---Executables---
   270	  printf("\nSorted data by ");
   271	  option == 1 ? printf("count:") : printf("power of two:");
   272	
   273	  for (i = 0; i < lastIndex; i++)
   274	  {
   275	    printf(" %d", inputList[i]);
   276	  }
   277	  printf("\n"); 
   278	}
